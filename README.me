# MiMapaGourmet

**MiMapaGourmet** es una app mobile hecha en React Native (con Expo) que te permite registrar, calificar y marcar en el mapa todos 
los platos que vas probando en diferentes lugares. Guard√° tu experiencia gastron√≥mica con fotos, notas, puntaje,
ubicaci√≥n y categor√≠as personalizadas.
¬°Ideal para foodies, viajeros y amantes del buen comer!
---

## üì± Features principales

- **Registro de platos:** Con foto (c√°mara o galer√≠a), nombre, descripci√≥n, precio, notas, puntaje y categor√≠as.
- **Mapa:** Todos tus platos aparecen geolocalizados con pines.
- **Filtros avanzados:** Busc√° por texto, favoritos y categor√≠as (multi-selecci√≥n).
- **Lista cronol√≥gica:** Ordenada por fecha de creaci√≥n.
- **Pantalla de estad√≠sticas:** Visualiz√° totales, promedios y favoritos.
- **Perfil offline:** Gesti√≥n del usuario con SQLite (nombre, email, foto), incluso sin conexi√≥n.
- **Autenticaci√≥n y backup:** Login y registro con Firebase, todos los datos sincronizados en la nube.

---

## üóÇÔ∏è Estructura de carpetas

/src
    /screens # Todas las pantallas (HomeScreen, AddPlatoScreen, MapScreen, EditPlatoScreen, StatsScreen, ProfileScreen, LoginScreen, RegisterScreen)
    /redux
        /slices # Slices de Redux (platosSlice, categoriasSlice, loginSlice)
        /store.js
    /services # Acceso a Firebase, servicios de datos (platosService.js, firebase/config.js)
    /utils # Funciones utilitarias
    /styles # Archivo de estilos global (style.js)
    /fonts # 
    /images # Logo y recursos gr√°ficos

---

## üõ†Ô∏è ¬øD√≥nde est√° cada requerimiento en el c√≥digo?

- **Redux Toolkit:**  
  - `/src/redux/slices/platosSlice.js` (maneja la lista de platos)  
  - `/src/redux/slices/categoriasSlice.js` (categor√≠as)  
  - `/src/redux/slices/loginSlice.js` (usuario)  
  - El store se define en `/src/redux/store.js`  
  - Usos: ver en `HomeScreen.js`, `EditPlatoScreen.js`, `AddPlatoScreen.js`, etc.

- **Firebase Firestore:**  
  - Configuraci√≥n: `/src/firebase/config.js`
  - Alta, edici√≥n y borrado de platos: `/src/services/platosService.js`
  - Autenticaci√≥n: `/src/redux/authApi.js`
  - Login/Register: `LoginScreen.js`, `RegisterScreen.js`

- **SQLite:**  
  - Solo se usa para **Perfil** (nombre, email, foto), porque pedia su uso en las rubicas.
  - Creaci√≥n de tabla: App.js
  - Acceso: `ProfileScreen.js`
  - El resto de los datos (platos, categor√≠as) se cargan desde Firebase.

- **Uso de c√°mara y galer√≠a:**  
  - Para la foto del plato (en base64): `AddPlatoScreen.js`, `EditPlatoScreen.js`
  - Para la foto del usuario (en base64): ProfileScreen.js
  - Manejo de permisos con `expo-image-picker`.

- ** Navegaci√≥n:**
    - Se aplica en varios lugares de diferentes maneras:
        - Se puede usar el navigation.navigate desde el Login hacia el Register
        - Luego se usan tabs para navegar dentro de la app
        - Tambien se usa redux y el estado del usuario para determinar si mostrar el Login o el Main (las tabs)
            De esta manera uno se asegura de que el usuario no puede volver para atras al Login o Register, desde el Main.


- **Mapa y geolocalizaci√≥n:**  
  - `MapScreen.js` muestra todos los platos como pines en un mapa.
  - En `AddPlatoScreen.js` y `EditPlatoScreen.js` se obtiene la ubicaci√≥n con `expo-location`. Se solicitan los permisos y sino 
    son aceptados, se guarda la ubicaci√≥n vacia.

- **Filtros y b√∫squeda:**  
  - Componentes en `HomeScreen.js` y `MapScreen.js`, con b√∫squeda en tiempo real, dropdown de categor√≠as y toggle de favoritos.

- **Validaciones y formularios:**  
  - Validaci√≥n de campos obligatorios en los modales de alta/edici√≥n (`AddPlatoScreen.js`, `EditPlatoScreen.js`).
  - Uso de `DropDownPicker`, inputs controlados, mensajes de error amigables.
  - Traducci√≥n de errores de Firebase en `/src/utils/traduccionesUtil.js`.

- **Estad√≠sticas y gr√°ficos:**  
  - `StatsScreen.js` muestra totales, promedios, favoritos y cantidad de platos por categor√≠a.

- **Estilo y fonts personalizadas:**  
  - Todos los estilos: `/src/styles/style.js`
  - Fonts importadas en `/assets/fonts`

- **Soporte m√≥vil completo:**  
  - Todas las pantallas usan ScrollView, layout responsivo y accesibilidad.
  - Modal de √©xito en altas/ediciones, scroll autom√°tico al mostrar errores.

---

## üì¶ Librer√≠as utilizadas y su prop√≥sito

Esta app utiliza una serie de librer√≠as para cumplir con los requerimientos del proyecto y optimizar la experiencia de usuario.  
A continuaci√≥n, se detalla cada una y su funci√≥n espec√≠fica dentro del c√≥digo:

---

### **Navegaci√≥n y estructura de pantallas**

- **@react-navigation/native**  
  Maneja la navegaci√≥n principal entre pantallas (Stacks, Tabs) de la app. Permite una experiencia fluida y desacoplada.
  Implementa la barra de navegaci√≥n inferior (BottomTabNavigator) con accesos r√°pidos a Home, Mapa, Stats y Perfil.
  Permite crear pilas de navegaci√≥n (StackNavigator)

---

### **Estado global y gesti√≥n de datos**

- **redux**  
  Provee el store centralizado de la app para manejar el estado global.
- **@reduxjs/toolkit**  
  Simplifica la creaci√≥n de slices y reducers. Se usa para platos, categor√≠as y usuario.
- **react-redux**  
  Conecta los componentes de React Native con el store de Redux para acceder y despachar acciones.

---

### **Firebase y almacenamiento en la nube**

- **firebase**  
  Utilizado para autenticaci√≥n de usuarios (login/register), almacenamiento de datos de platos y categor√≠as en Firestore.

---

### **Funcionalidades Expo (plataforma de desarrollo)**

- **expo**  
  Permite desarrollar, compilar y testear la app en dispositivos f√≠sicos/emuladores de forma sencilla.
- **expo-font**  
  Carga y gestiona fuentes personalizadas (Livvic-Regular y Bold) para un estilo visual consistente.
- **expo-image-picker**  
  Permite al usuario tomar una foto desde la c√°mara o elegir de la galer√≠a para asociar una imagen a un plato.
- **expo-location**  
  Obtiene la ubicaci√≥n geogr√°fica actual del usuario para registrar d√≥nde se degust√≥ cada plato.
- **expo-sqlite**  
  Permite crear y gestionar una base de datos SQLite local, que se usa para almacenar el perfil de usuario offline.
- **expo-status-bar**  
  Controla la apariencia de la barra de estado de Android/iOS para una UI integrada.

---

### **Interfaz de usuario avanzada**

- **react-native-dropdown-picker**  
  Dropdown moderno y customizable para seleccionar una o varias categor√≠as al filtrar o registrar platos.
- **react-native-svg**  
  Permite gr√°ficos SVG (por ejemplo, √≠conos vectoriales y gr√°ficos en StatsScreen).
- **react-native-chart-kit**  
  Utilizado para mostrar gr√°ficos y estad√≠sticas visuales (cantidad de platos por categor√≠a, puntajes, etc).

---

**¬øPor qu√© se eligieron estas librer√≠as?**

- **Expo:** Simplifica mucho el workflow mobile, integraci√≥n de c√°mara, galer√≠a, mapas, fonts y facilita el testing multiplataforma.
- **Redux Toolkit:** Hace muy f√°cil y seguro manejar el estado global, la sincronizaci√≥n con Firebase y la consistencia de los datos.
- **Firebase:** Provee autenticaci√≥n segura y almacenamiento escalable en la nube, cumpliendo el requerimiento de backup y login/logout seguro.
- **SQLite:** Requerido por el curso para simular datos offline/locales, en este caso solo se utiliza para el perfil de usuario.
- **DropdownPicker, ChartKit:** Optimizan la UI y la experiencia de usuario haci√©ndola moderna, reactiva y visualmente atractiva.

---

### **¬øD√≥nde se usan estas librer√≠as?**

- **Navegaci√≥n:**  
  `src/screens/LoginScreen.js /src/navigation/BottomTabNavigator.js`, `/src/navigation/StackNavigator.js`

- **Redux:**  
  `/src/redux/slices/`, `/src/redux/store.js`  y a lo largo del proyecto para los estados

- **Firebase:**  
  `/src/firebase/config.js`, `/src/services/platosService.js`, `/src/screens/LoginScreen.js`

- **Expo y UI:**  
  `/src/screens/AddPlatoScreen.js`, `/src/screens/EditPlatoScreen.js`, `/src/screens/ProfileScreen.js`, `/src/styles/style.js`

- **Estad√≠sticas:**  
  `/src/screens/StatsScreen.js`

---

## üöÄ C√≥mo instalar y correr la app

1. **Clonar el repo y entrar al proyecto:**
    ```sh
    git clone <tu-repo>
    cd MiMapaGourmet
    ```

2. **Instalar dependencias:**
    ```sh
    npm install
    ```

3. **Asegurarse de tener la font Livvic-Regular y Livvic-Bold en `/assets/fonts`

4. **Configurar credenciales de Firebase:**
    - Editar `/src/firebase/config.js` con tu proyecto y claves.

5. **Levantar la app:**
    ```sh
    npx expo start
    ```

6. **Para compilar el APK:**
    ```sh
    npx expo run:android
    ```

---

## üìë Requerimientos del proyecto y su cumplimiento

| Requerimiento           | ¬øD√≥nde est√° implementado?                |
|-------------------------|------------------------------------------|
| Listas                  | HomeScreen.js (FlatList de platos)       |
| Modales                 | AddPlatoScreen.js, EditPlatoScreen.js    |
| Varias pantallas        | `/src/screens/` (7+ screens)             |
| Im√°genes                | Camera/gallery (expo-image-picker)       |
| Navegaci√≥n entre Tabs   | BottomTabNavigator.js                    |
| Redux                   | `/src/redux/slices/`, store.js           |
| Firebase                | `/src/services/`, `/src/firebase/config` |
| Login/Logout            | LoginScreen.js, PerfilScreen.js          |
| Uso de la c√°mara        | AddPlatoScreen.js, EditPlatoScreen.js    |
| Maps y localizaci√≥n     | MapScreen.js, AddPlatoScreen.js          |
| SQLite                  | ProfileScreen.js (solo perfil)           |

---

## ‚ö° Ejemplo visual de pantallas

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HomeScreen ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ [üçï] Pizza Napolitana              ‚îÇ
‚îÇ [üçî] Burger Provoleta              ‚îÇ
‚îÇ [üç£] Sushi Variado 7               ‚îÇ 
‚îÇ               Agregar plato  [ + ]  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MapScreen ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ [ Mapa con pines de platos ]        ‚îÇ
‚îÇ [Filtro: Sushi, 2024]               ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Estad√≠sticas ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Total de platos: 14                 ‚îÇ
‚îÇ Favoritos: 4                        ‚îÇ
‚îÇ Mejor puntuado: ‚ÄúTarta Marquisse‚Äù   ‚îÇ
‚îÇ Categor√≠a m√°s frecuente: Pizza      ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Perfil ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Foto Nombre Email                   ‚îÇ
‚îÇ [ Cambiar foto ] [ Guardar ]        ‚îÇ
‚îÇ [ Cerrar sesi√≥n ]                   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò


---

## üèóÔ∏è Futuras mejoras

- Posibilidad de cambiar la direccion de mail y contrasena
- Poder compartir platos con amigos
- Mapa interactivo

---

## ‚úçÔ∏è Cr√©ditos

Desarrollado por Alan Flomembaum para el proyecto final de React Native / Expo en CoderHouse.  
---
